#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'symbolDictName'.
	SuperDoitOptionalOptionWithRequiredArg long: 'componentName' default: 'Core'.
	SuperDoitOptionalOptionWithNoArg long: 'load'.
}
%
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D] <options>[-- [<stone-name> [<topaz-command-line-args>] ] ]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D] <options> --  -l -I <path-to-.topazini-file>

      $basename addPackage <project-name> <component-name> <condition> <package-name-list>

DESCRIPTION
  Add new common or pharo or gemstone package 

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h -- rowan_361
  $basename -h -- -l -I $GEMSTONE/data/.topazini

  installRowamSample1.stone -D -- -l -I .topazini
  $basename -D addPackage RowanSample1 platform/gs3.6- gs3.[6-]  RowanSample1-GemStone36- --symbolDictName=Globals -- -l -I .topazini

  installDataFrame.stone -D -- -l -I .topazini
  $basename -D addPackage OrderedDictionary platform/gs3.6- gs3.[6-]  OrderedDictionary-GemStone36- --symbolDictName=Globals -- -l -I .topazini

  installDataFrame.stone -D -- -l -I .topazini
  $basename -D addPackage OrderedDictionary platform/gs3.6- gs3.[6-]  OrderedDictionary-GemStone36- --symbolDictName=Globals --load -- -l -I .topazini
-----
%
instvars
definedProject
%
method
writeAndReloadProject
	| resolvedProject |
	resolvedProject := (RwResolvedProject newNamed: definedProject name)
		_resolvedProject: definedProject _resolvedProject;
		yourself.
	resolvedProject export.
	self load ifTrue: [ resolvedProject load ].
%
doit
	| command components packages projectName componentName condition |
	self positionalArgs size = 5
		ifFalse: [
			self usage. 
			self error: 'incorrect number of positional arguments' ].
	packages := self positionalArgs copy.
	command := packages removeFirst asLowercase.
	projectName := packages removeFirst.
	componentName := packages removeFirst.
	condition := packages removeFirst.
	definedProject := (Rowan projectNamed: projectName) defined.
	definedProject := definedProject resolve defined. "yeah, I know..."
	components := definedProject _resolvedProject _projectDefinition components.
	definedProject
		componentNamed: componentName 
		ifAbsent: [
			components
				addPlatformNestedComponentNamed: componentName 
				condition: { condition } 
				comment: '' ].
	(definedProject componentNamed: self componentName) addComponentNamed: componentName.
	command = 'addpackage'
		ifTrue: [
			self symbolDictName
				ifNotNil: [:symbolDictName |
					packages do: [:packageName |
						definedProject 
							addPackageNamed: packageName 
							toComponentNamed: componentName
							gemstoneDefaultSymbolDictionaryForUser: (System myUserProfile userId -> symbolDictName) ] ]
				ifNil: [
					packages do: [:packageName |
						definedProject 
							addPackageNamed: packageName 
							toComponentNamed: componentName ] ].
				self writeAndReloadProject.
				^ System commit ].
	self error: 'Unknown command ', command printString.
	^ self noResult
%
